
lowPowerSmokeAlarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b24  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d4  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000211  00000000  00000000  000021c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000023d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_6>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  88:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <alarmTimer>:
	}
	PORTB &= ~(1 << LED);
}

void alarmTimer() {
	TCNT0 = 131;
  90:	83 e8       	ldi	r24, 0x83	; 131
  92:	86 bd       	out	0x26, r24	; 38
	TCCR0A = 0x00;
  94:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x03;
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	85 bd       	out	0x25, r24	; 37
	while((TIFR0 & (1 << TOV0)) == 0);
  9a:	a8 9b       	sbis	0x15, 0	; 21
  9c:	fe cf       	rjmp	.-4      	; 0x9a <alarmTimer+0xa>
	TCCR0B = 0;
  9e:	15 bc       	out	0x25, r1	; 37
	TIFR0 = (1 << TOV0);
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	85 bb       	out	0x15, r24	; 21
	PORTD ^= (1 << 0);
  a4:	9b b1       	in	r25, 0x0b	; 11
  a6:	89 27       	eor	r24, r25
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	08 95       	ret

000000ac <powerDown_setup>:
}

void powerDown_setup() {
	// setup for sleep mode
	SMCR |= (1 << SM1); // power-down mode
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	83 bf       	out	0x33, r24	; 51
	SMCR |= (1 << SE); // enable sleep
  b2:	83 b7       	in	r24, 0x33	; 51
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	83 bf       	out	0x33, r24	; 51
	
	WDTCSR = (1 << WDE) | (1 << WDCE); // set watchdog enable (WDE) and watchdog change enable (WDCE)
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	80 83       	st	Z, r24
	WDTCSR = (1 << WDP3); // prescaler, set for 4s counter, get rid of WDE and WDCE
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
	WDTCSR |= (1 << WDIE); // set interrupt enable
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <powerDown_watchDog>:
}

void powerDown_watchDog() {
	// 2 minutes of sleep time, 60 = 4 * 15;
	for(unsigned char i = 0; i < 15; i++) {
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <powerDown_watchDog+0x8>
		__asm__  __volatile__("sleep"); //in line assembler to go to sleep
  d0:	88 95       	sleep
	WDTCSR |= (1 << WDIE); // set interrupt enable
}

void powerDown_watchDog() {
	// 2 minutes of sleep time, 60 = 4 * 15;
	for(unsigned char i = 0; i < 15; i++) {
  d2:	8f 5f       	subi	r24, 0xFF	; 255
  d4:	8f 30       	cpi	r24, 0x0F	; 15
  d6:	e0 f3       	brcs	.-8      	; 0xd0 <powerDown_watchDog+0x4>
		__asm__  __volatile__("sleep"); //in line assembler to go to sleep
	}
}
  d8:	08 95       	ret

000000da <__vector_6>:

ISR(WDT_vect) {
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
	// watchdog interrupt
}
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <ADC_init>:

void ADC_init() {
	// Initializes ADC for PD0
	DDRC &= ~(1 << SENSOR); // set PC0 as an input
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = (1 << ADEN); // enable ADC module
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); // set speed to 125 kHz
  fc:	80 81       	ld	r24, Z
  fe:	87 60       	ori	r24, 0x07	; 7
 100:	80 83       	st	Z, r24
	ADMUX = 0x40; // set VREF = 5V, select ADC0 as input
 102:	80 e4       	ldi	r24, 0x40	; 64
 104:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 108:	08 95       	ret

0000010a <ADC_read>:
}

int ADC_read() {
	// Reads ADC value for PD0
	ADCSRA |= (1<<ADSC); // start ADC conversion
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF)) == 0); // wait for conversion to end
 114:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 118:	84 ff       	sbrs	r24, 4
 11a:	fc cf       	rjmp	.-8      	; 0x114 <ADC_read+0xa>
	
	unsigned int digWord = ADCL| (ADCH<<8); // read ADCL then ADCH
 11c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 120:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	98 2f       	mov	r25, r24
 128:	88 27       	eor	r24, r24
	return digWord; // return analog value
}
 12a:	82 2b       	or	r24, r18
 12c:	08 95       	ret

0000012e <UART_init>:

void UART_init() {
	// Initializes UART
	UCSR0B = (1<<TXEN0); // enable UART transmission
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // asynchronous mode, 8-bit data, 1 stop bit, no parity
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = 103; // 9600 baud rate at 16MHz clock
 13a:	87 e6       	ldi	r24, 0x67	; 103
 13c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 140:	08 95       	ret

00000142 <UART_send>:
}

void UART_send(char letter) {
	// Sends a single character over UART
	while((UCSR0A & (1<<UDRE0)) == 0); // wait till TX buffer is empty
 142:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 146:	95 ff       	sbrs	r25, 5
 148:	fc cf       	rjmp	.-8      	; 0x142 <UART_send>
	UDR0 = letter; // send out letter
 14a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14e:	08 95       	ret

00000150 <UART_writeString>:
}

void UART_writeString(char *stringAdd) {
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
	// Sends a string over UART
	unsigned char i;
	for (i = 0; i < strlen(stringAdd); i++) {
 158:	10 e0       	ldi	r17, 0x00	; 0
 15a:	07 c0       	rjmp	.+14     	; 0x16a <UART_writeString+0x1a>
		UART_send(stringAdd[i]);
 15c:	fe 01       	movw	r30, r28
 15e:	e8 0f       	add	r30, r24
 160:	f9 1f       	adc	r31, r25
 162:	80 81       	ld	r24, Z
 164:	0e 94 a1 00 	call	0x142	; 0x142 <UART_send>
}

void UART_writeString(char *stringAdd) {
	// Sends a string over UART
	unsigned char i;
	for (i = 0; i < strlen(stringAdd); i++) {
 168:	1f 5f       	subi	r17, 0xFF	; 255
 16a:	81 2f       	mov	r24, r17
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fe 01       	movw	r30, r28
 170:	01 90       	ld	r0, Z+
 172:	00 20       	and	r0, r0
 174:	e9 f7       	brne	.-6      	; 0x170 <UART_writeString+0x20>
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	ec 1b       	sub	r30, r28
 17a:	fd 0b       	sbc	r31, r29
 17c:	8e 17       	cp	r24, r30
 17e:	9f 07       	cpc	r25, r31
 180:	68 f3       	brcs	.-38     	; 0x15c <UART_writeString+0xc>
		UART_send(stringAdd[i]);
	}
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	08 95       	ret

0000018a <init_configure>:
    }
}

void init_configure() {
	// initial configuration to avoid a false alarm 
	while(ADC_read() > 400) {
 18a:	21 c0       	rjmp	.+66     	; 0x1ce <init_configure+0x44>
		PORTB |= (1 << LED);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	85 b9       	out	0x05, r24	; 5
		digitalVal = ADC_read(); // read from ADC PC0
 192:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_read>
 196:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 19e:	4a e0       	ldi	r20, 0x0A	; 10
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	71 e0       	ldi	r23, 0x01	; 1
 1a4:	0e 94 38 01 	call	0x270	; 0x270 <__itoa_ncheck>
		itoa(digitalVal, buffer, 10);
		UART_writeString(buffer);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 a8 00 	call	0x150	; 0x150 <UART_writeString>
		UART_send(13); // carriage return
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	0e 94 a1 00 	call	0x142	; 0x142 <UART_send>
		UART_send(10); // new line
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	0e 94 a1 00 	call	0x142	; 0x142 <UART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	81 ee       	ldi	r24, 0xE1	; 225
 1c0:	94 e0       	ldi	r25, 0x04	; 4
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <init_configure+0x38>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <init_configure+0x42>
 1cc:	00 00       	nop
    }
}

void init_configure() {
	// initial configuration to avoid a false alarm 
	while(ADC_read() > 400) {
 1ce:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_read>
 1d2:	81 39       	cpi	r24, 0x91	; 145
 1d4:	91 40       	sbci	r25, 0x01	; 1
 1d6:	d4 f6       	brge	.-76     	; 0x18c <init_configure+0x2>
		UART_send(13); // carriage return
		UART_send(10); // new line
		
		_delay_ms(100); // mild delay for UART to work
	}
	PORTB &= ~(1 << LED);
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	8d 7f       	andi	r24, 0xFD	; 253
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	08 95       	ret

000001e0 <main>:
// misc functions
void init_configure();
void alarmTimer();

int main(void) {
	DDRB |= (1 << LED);
 1e0:	84 b1       	in	r24, 0x04	; 4
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << 0);
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1 << 0);
 1ea:	8b b9       	out	0x0b, r24	; 11
	
	UART_init(); // initialize UART
 1ec:	0e 94 97 00 	call	0x12e	; 0x12e <UART_init>
	ADC_init(); // initialize ADC
 1f0:	0e 94 77 00 	call	0xee	; 0xee <ADC_init>
	
	init_configure(); // make sure actual sensor readings lead to warnings
 1f4:	0e 94 c5 00 	call	0x18a	; 0x18a <init_configure>
	powerDown_setup(); // initialize powerDown
 1f8:	0e 94 56 00 	call	0xac	; 0xac <powerDown_setup>
	sei(); // enable global interrupts
 1fc:	78 94       	sei
	// device is to be deployed in clean air
	// stay in permanent loop till the sensor reaches clean air levels (<400)
	
    while (1) {
		// main-loop: check ADC level every few minutes, go to sleep
		digitalVal = ADC_read(); // read from ADC PC0
 1fe:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_read>
 202:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 20a:	4a e0       	ldi	r20, 0x0A	; 10
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	0e 94 38 01 	call	0x270	; 0x270 <__itoa_ncheck>
		itoa(digitalVal, buffer, 10);
		UART_writeString(buffer);
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 a8 00 	call	0x150	; 0x150 <UART_writeString>
		UART_send(13); // carriage return
 21c:	8d e0       	ldi	r24, 0x0D	; 13
 21e:	0e 94 a1 00 	call	0x142	; 0x142 <UART_send>
		UART_send(10); // new line
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	0e 94 a1 00 	call	0x142	; 0x142 <UART_send>
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	9c e9       	ldi	r25, 0x9C	; 156
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x4c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x52>
 232:	00 00       	nop
		
		_delay_ms(10); // mild delay for UART to work
		
		powerDown_watchDog(); // go to sleep
 234:	0e 94 66 00 	call	0xcc	; 0xcc <powerDown_watchDog>
		
		if(ADC_read() > 600) {
 238:	0e 94 85 00 	call	0x10a	; 0x10a <ADC_read>
 23c:	89 35       	cpi	r24, 0x59	; 89
 23e:	92 40       	sbci	r25, 0x02	; 2
 240:	f4 f2       	brlt	.-68     	; 0x1fe <main+0x1e>
			// permanently go into alarm mode
			while(1) {
				for(int i = 0; i < 350; i++) {
 242:	c0 e0       	ldi	r28, 0x00	; 0
 244:	d0 e0       	ldi	r29, 0x00	; 0
 246:	03 c0       	rjmp	.+6      	; 0x24e <main+0x6e>
					alarmTimer();
 248:	0e 94 48 00 	call	0x90	; 0x90 <alarmTimer>
		powerDown_watchDog(); // go to sleep
		
		if(ADC_read() > 600) {
			// permanently go into alarm mode
			while(1) {
				for(int i = 0; i < 350; i++) {
 24c:	21 96       	adiw	r28, 0x01	; 1
 24e:	ce 35       	cpi	r28, 0x5E	; 94
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	d8 07       	cpc	r29, r24
 254:	cc f3       	brlt	.-14     	; 0x248 <main+0x68>
					alarmTimer();
				}
				PORTD &= ~(1 << 0);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	8e 7f       	andi	r24, 0xFE	; 254
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	9f ef       	ldi	r25, 0xFF	; 255
 25e:	21 ee       	ldi	r18, 0xE1	; 225
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	91 50       	subi	r25, 0x01	; 1
 264:	20 40       	sbci	r18, 0x00	; 0
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <main+0x82>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <main+0x8c>
 26c:	00 00       	nop
 26e:	e9 cf       	rjmp	.-46     	; 0x242 <main+0x62>

00000270 <__itoa_ncheck>:
 270:	bb 27       	eor	r27, r27
 272:	4a 30       	cpi	r20, 0x0A	; 10
 274:	31 f4       	brne	.+12     	; 0x282 <__itoa_ncheck+0x12>
 276:	99 23       	and	r25, r25
 278:	22 f4       	brpl	.+8      	; 0x282 <__itoa_ncheck+0x12>
 27a:	bd e2       	ldi	r27, 0x2D	; 45
 27c:	90 95       	com	r25
 27e:	81 95       	neg	r24
 280:	9f 4f       	sbci	r25, 0xFF	; 255
 282:	0c 94 44 01 	jmp	0x288	; 0x288 <__utoa_common>

00000286 <__utoa_ncheck>:
 286:	bb 27       	eor	r27, r27

00000288 <__utoa_common>:
 288:	fb 01       	movw	r30, r22
 28a:	55 27       	eor	r21, r21
 28c:	aa 27       	eor	r26, r26
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	aa 1f       	adc	r26, r26
 294:	a4 17       	cp	r26, r20
 296:	10 f0       	brcs	.+4      	; 0x29c <__utoa_common+0x14>
 298:	a4 1b       	sub	r26, r20
 29a:	83 95       	inc	r24
 29c:	50 51       	subi	r21, 0x10	; 16
 29e:	b9 f7       	brne	.-18     	; 0x28e <__utoa_common+0x6>
 2a0:	a0 5d       	subi	r26, 0xD0	; 208
 2a2:	aa 33       	cpi	r26, 0x3A	; 58
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <__utoa_common+0x20>
 2a6:	a9 5d       	subi	r26, 0xD9	; 217
 2a8:	a1 93       	st	Z+, r26
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	79 f7       	brne	.-34     	; 0x28c <__utoa_common+0x4>
 2ae:	b1 11       	cpse	r27, r1
 2b0:	b1 93       	st	Z+, r27
 2b2:	11 92       	st	Z+, r1
 2b4:	cb 01       	movw	r24, r22
 2b6:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <strrev>

000002ba <strrev>:
 2ba:	dc 01       	movw	r26, r24
 2bc:	fc 01       	movw	r30, r24
 2be:	67 2f       	mov	r22, r23
 2c0:	71 91       	ld	r23, Z+
 2c2:	77 23       	and	r23, r23
 2c4:	e1 f7       	brne	.-8      	; 0x2be <strrev+0x4>
 2c6:	32 97       	sbiw	r30, 0x02	; 2
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <strrev+0x18>
 2ca:	7c 91       	ld	r23, X
 2cc:	6d 93       	st	X+, r22
 2ce:	70 83       	st	Z, r23
 2d0:	62 91       	ld	r22, -Z
 2d2:	ae 17       	cp	r26, r30
 2d4:	bf 07       	cpc	r27, r31
 2d6:	c8 f3       	brcs	.-14     	; 0x2ca <strrev+0x10>
 2d8:	08 95       	ret

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
