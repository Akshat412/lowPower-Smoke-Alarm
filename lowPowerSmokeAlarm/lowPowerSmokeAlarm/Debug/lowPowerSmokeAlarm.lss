
lowPowerSmokeAlarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099c  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000805  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000403  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045d  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fa  00000000  00000000  00001e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000200f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_6>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  78:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <powerDown_setup>:
		powerDown_watchDog(); // go to sleep
    }
}

void powerDown_setup() {
	SMCR |= (1 << SM1); // power-down mode
  80:	83 b7       	in	r24, 0x33	; 51
  82:	84 60       	ori	r24, 0x04	; 4
  84:	83 bf       	out	0x33, r24	; 51
	SMCR |= (1 << SE); // enable sleep
  86:	83 b7       	in	r24, 0x33	; 51
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	83 bf       	out	0x33, r24	; 51
	
	WDTCSR = (1 << WDE) | (1 << WDCE); // set watchdog enable (WDE) and watchdog change enable (WDCE)
  8c:	e0 e6       	ldi	r30, 0x60	; 96
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	88 e1       	ldi	r24, 0x18	; 24
  92:	80 83       	st	Z, r24
	WDTCSR = (1 << WDP3); // prescaler, set for 4s counter, get rid of WDE and WDCE
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	80 83       	st	Z, r24
	WDTCSR |= (1 << WDIE); // set interrupt enable
  98:	80 81       	ld	r24, Z
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <powerDown_watchDog>:
}

void powerDown_watchDog() {
	// 2 minutes of sleep time, 120 = 4 * 30
	for(unsigned char i = 0; i < 30; i++) {
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <powerDown_watchDog+0x8>
		__asm__  __volatile__("sleep"); //in line assembler to go to sleep
  a4:	88 95       	sleep
	WDTCSR |= (1 << WDIE); // set interrupt enable
}

void powerDown_watchDog() {
	// 2 minutes of sleep time, 120 = 4 * 30
	for(unsigned char i = 0; i < 30; i++) {
  a6:	8f 5f       	subi	r24, 0xFF	; 255
  a8:	8e 31       	cpi	r24, 0x1E	; 30
  aa:	e0 f3       	brcs	.-8      	; 0xa4 <powerDown_watchDog+0x4>
		__asm__  __volatile__("sleep"); //in line assembler to go to sleep
	}
}
  ac:	08 95       	ret

000000ae <__vector_6>:

ISR(WDT_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
	// watchdog interrupt
}
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <ADC_init>:

void ADC_init() {
	// Initializes ADC for PD0
	DDRC &= ~(1 << SENSOR); // set PC0 as an input
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = (1 << ADEN); // enable ADC module
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2); // set speed to 125 kHz
  d0:	80 81       	ld	r24, Z
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	80 83       	st	Z, r24
	ADMUX = 0x40; // set VREF = 5V, select ADC0 as input
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  dc:	08 95       	ret

000000de <ADC_read>:
}

int ADC_read() {
	// Reads ADC value for PD0
	ADCSRA |= (1<<ADSC); // start ADC conversion
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF)) == 0); // wait for conversion to end
  e8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ec:	84 ff       	sbrs	r24, 4
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <ADC_read+0xa>
	
	unsigned int digWord = ADCL| (ADCH<<8); // read ADCL then ADCH
  f0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	98 2f       	mov	r25, r24
  fc:	88 27       	eor	r24, r24
	return digWord; // return analog value
}
  fe:	82 2b       	or	r24, r18
 100:	08 95       	ret

00000102 <UART_init>:

void UART_init() {
	// Initializes UART
	UCSR0B = (1<<TXEN0); // enable UART transmission
 102:	88 e0       	ldi	r24, 0x08	; 8
 104:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // asynchronous mode, 8-bit data, 1 stop bit, no parity
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = 103; // 9600 baud rate at 16MHz clock
 10e:	87 e6       	ldi	r24, 0x67	; 103
 110:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 114:	08 95       	ret

00000116 <UART_send>:
}

void UART_send(char letter) {
	// Sends a single character over UART
	while((UCSR0A & (1<<UDRE0)) == 0); // wait till TX buffer is empty
 116:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11a:	95 ff       	sbrs	r25, 5
 11c:	fc cf       	rjmp	.-8      	; 0x116 <UART_send>
	UDR0 = letter; // send out letter
 11e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 122:	08 95       	ret

00000124 <UART_writeString>:
}

void UART_writeString(char *stringAdd) {
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	ec 01       	movw	r28, r24
	// Sends a string over UART
	unsigned char i;
	for (i = 0; i < strlen(stringAdd); i++) {
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	07 c0       	rjmp	.+14     	; 0x13e <UART_writeString+0x1a>
		UART_send(stringAdd[i]);
 130:	fe 01       	movw	r30, r28
 132:	e8 0f       	add	r30, r24
 134:	f9 1f       	adc	r31, r25
 136:	80 81       	ld	r24, Z
 138:	0e 94 8b 00 	call	0x116	; 0x116 <UART_send>
}

void UART_writeString(char *stringAdd) {
	// Sends a string over UART
	unsigned char i;
	for (i = 0; i < strlen(stringAdd); i++) {
 13c:	1f 5f       	subi	r17, 0xFF	; 255
 13e:	81 2f       	mov	r24, r17
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	fe 01       	movw	r30, r28
 144:	01 90       	ld	r0, Z+
 146:	00 20       	and	r0, r0
 148:	e9 f7       	brne	.-6      	; 0x144 <UART_writeString+0x20>
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	ec 1b       	sub	r30, r28
 14e:	fd 0b       	sbc	r31, r29
 150:	8e 17       	cp	r24, r30
 152:	9f 07       	cpc	r25, r31
 154:	68 f3       	brcs	.-38     	; 0x130 <UART_writeString+0xc>
		UART_send(stringAdd[i]);
	}
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	08 95       	ret

0000015e <main>:
// UART functions
void UART_init();
void UART_send(char letter);
void UART_writeString(char *stringAdd);

int main(void) {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	00 d0       	rcall	.+0      	; 0x164 <main+0x6>
 164:	00 d0       	rcall	.+0      	; 0x166 <main+0x8>
 166:	00 d0       	rcall	.+0      	; 0x168 <main+0xa>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
    unsigned int digitalVal = 0; // 10-bit digital value of the MQ2 sensor
    char buffer[6]; // buffer to send to UART
	UART_init(); // initialize UART
 16c:	0e 94 81 00 	call	0x102	; 0x102 <UART_init>
	ADC_init(); // initialize ADC
 170:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_init>
	
	powerDown_setup(); // initialize powerDown
 174:	0e 94 40 00 	call	0x80	; 0x80 <powerDown_setup>
	sei(); // enable global interrupts
 178:	78 94       	sei
	
    while (1) {
		digitalVal = ADC_read(); // read from ADC PC0
 17a:	0e 94 6f 00 	call	0xde	; 0xde <ADC_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 17e:	4a e0       	ldi	r20, 0x0A	; 10
 180:	be 01       	movw	r22, r28
 182:	6f 5f       	subi	r22, 0xFF	; 255
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__itoa_ncheck>
		itoa(digitalVal, buffer, 10);
		UART_writeString(buffer);
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	0e 94 92 00 	call	0x124	; 0x124 <UART_writeString>
		UART_send(13);
 192:	8d e0       	ldi	r24, 0x0D	; 13
 194:	0e 94 8b 00 	call	0x116	; 0x116 <UART_send>
		UART_send(10);
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	0e 94 8b 00 	call	0x116	; 0x116 <UART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9c e9       	ldi	r25, 0x9C	; 156
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x44>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x4a>
 1a8:	00 00       	nop
		
		_delay_ms(10);
		powerDown_watchDog(); // go to sleep
 1aa:	0e 94 50 00 	call	0xa0	; 0xa0 <powerDown_watchDog>
 1ae:	e5 cf       	rjmp	.-54     	; 0x17a <main+0x1c>

000001b0 <__itoa_ncheck>:
 1b0:	bb 27       	eor	r27, r27
 1b2:	4a 30       	cpi	r20, 0x0A	; 10
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <__itoa_ncheck+0x12>
 1b6:	99 23       	and	r25, r25
 1b8:	22 f4       	brpl	.+8      	; 0x1c2 <__itoa_ncheck+0x12>
 1ba:	bd e2       	ldi	r27, 0x2D	; 45
 1bc:	90 95       	com	r25
 1be:	81 95       	neg	r24
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__utoa_common>

000001c6 <__utoa_ncheck>:
 1c6:	bb 27       	eor	r27, r27

000001c8 <__utoa_common>:
 1c8:	fb 01       	movw	r30, r22
 1ca:	55 27       	eor	r21, r21
 1cc:	aa 27       	eor	r26, r26
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	aa 1f       	adc	r26, r26
 1d4:	a4 17       	cp	r26, r20
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <__utoa_common+0x14>
 1d8:	a4 1b       	sub	r26, r20
 1da:	83 95       	inc	r24
 1dc:	50 51       	subi	r21, 0x10	; 16
 1de:	b9 f7       	brne	.-18     	; 0x1ce <__utoa_common+0x6>
 1e0:	a0 5d       	subi	r26, 0xD0	; 208
 1e2:	aa 33       	cpi	r26, 0x3A	; 58
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <__utoa_common+0x20>
 1e6:	a9 5d       	subi	r26, 0xD9	; 217
 1e8:	a1 93       	st	Z+, r26
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	79 f7       	brne	.-34     	; 0x1cc <__utoa_common+0x4>
 1ee:	b1 11       	cpse	r27, r1
 1f0:	b1 93       	st	Z+, r27
 1f2:	11 92       	st	Z+, r1
 1f4:	cb 01       	movw	r24, r22
 1f6:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <strrev>

000001fa <strrev>:
 1fa:	dc 01       	movw	r26, r24
 1fc:	fc 01       	movw	r30, r24
 1fe:	67 2f       	mov	r22, r23
 200:	71 91       	ld	r23, Z+
 202:	77 23       	and	r23, r23
 204:	e1 f7       	brne	.-8      	; 0x1fe <strrev+0x4>
 206:	32 97       	sbiw	r30, 0x02	; 2
 208:	04 c0       	rjmp	.+8      	; 0x212 <strrev+0x18>
 20a:	7c 91       	ld	r23, X
 20c:	6d 93       	st	X+, r22
 20e:	70 83       	st	Z, r23
 210:	62 91       	ld	r22, -Z
 212:	ae 17       	cp	r26, r30
 214:	bf 07       	cpc	r27, r31
 216:	c8 f3       	brcs	.-14     	; 0x20a <strrev+0x10>
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
